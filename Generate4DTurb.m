% Generate 4D turbulengthce from 3D turbulence for both Mann
% turbulence generator or Turbsim
% 
% Usage: Generate4DTurb(ConfigParameters,TurbData3D) 
% 
% 
% Input: Configuration parameters, generated by TurbConfig.m and ExecuteSim.m
% 
% 
% 
% Output: [TurbData4D, ErrorSat, ErrorMessage]
%         ErrorSat: 1 for error detected, 0 for no error
%         ErrorMessage: the error message, written as string
%         TurbData4D: 4D turbulence in m/s
% 
% 
% Modified:
% 
% 
% ToDo: 
% 
% Created: Feng Guo 19-Nov 2020 Flensburg University of Applied Sciences

function  [TurbData4D, ErrorSat, ErrorMessage]= Generate4DTurb(ConfigParameters,TurbData3D) 
    
    % Model Specific lines used for Turbsim
    if ConfigParameters.Model == 'Kaimal'     
        Xvec                            = ConfigParameters.Xvec;
        Nx                              = ConfigParameters.Nx ;
        Ny                              = ConfigParameters.Ny ;
        Nz                              = ConfigParameters.Nz ;
        rx                              = pdist2(Xvec', Xvec')  ;  
        nfft                            = Nx;
        Seeds                           = ConfigParameters.Seeds ;
        u                               = TurbData3D.u  ;                  % Nlongi, Nx,Ny,Nz    
        kappa_x                         = ConfigParameters.kappa_x;
        Mean_u_yz                       = mean(u,2);                       % Get the mean value of u component
        u_var                           = u-Mean_u_yz;                     % fluctuation of u
        
        % specify the variable
        TurbData4D.u                 = zeros(length(Seeds),Nx,Ny,Nz);  %  4d turb u component      
        TurbData4D.v                 = TurbData3D.v;   %  4d turb v component 
        TurbData4D.w                 = TurbData3D.w;   %  4d turb w component
        
        %  Calculate fourier coeffieients 
        FCu                             = zeros(length(Seeds),Nx,Ny*Nz);  % two sided Fourier coefficient u                         
        Hu_yz                           = zeros(length(Seeds),Nx/2);      % single sided FC
        
        H_u_new                         = zeros(length(Seeds),Nx/2);      % single sided FC unfrozen
        H_w_new                         = zeros(length(Seeds),Nx/2);      % single sided FC unfrozen
        
        u_unfro                         = zeros(length(Seeds),Nx,Ny*Nz);      % temporarily store the unfrozen u
%         w_unfro                         = zeros(length(Seeds),Nx,Ny*Nz);      % temporarily store the unfrozen w
%         
        disp('Turbulengthce unfreezing started...')
        for i =1: length(Seeds)
            FCu(i,:,:)                  = reshape(fft(squeeze(u_var(i,:,:,:))),[Nx,Ny*Nz]);            
        end
        
            for i_yz = 1: Ny*Nz      % loop over points inside yz plane
                
                for i_x = 1: length(Seeds)  % loop over differnt yz planes
                    Hu_yz(i_x,:)              = FCu(i_x,1:Nx/2,i_yz);
                end
                
                for i_f =1:nfft/2  % loop over each frequency
                    gamma_u_x           = exp(-kappa_x(i_f).*rx) ;       % Coherence matrix X plane;
                    Gcohx               = chol(gamma_u_x,'lower') ;  % cholesky decomposition of X  coherence
                    H_u_new(:,i_f)      = Gcohx*real(Hu_yz(:,i_f))+Gcohx*imag(Hu_yz(:,i_f))*1i;                                     
                end
                u_unfro(:,:,i_yz)       = ifft(H_u_new,Nx,2,'Symmetric');   
            end
            
        % the TurbData is stored by the dimention Nlongi*3(uvw) *Nx*Ny*Nz  
        TurbData4D.u                    = reshape(u_unfro,length(Seeds),Nx,Ny,Nz)+Mean_u_yz;
        disp('4D turbulence simulation finished!')
        ErrorSat     = 0 ;
        ErrorMessage = 'No error detected!';

       
       
    % Model Specific lines used for Mann turbulengthce generator
    elseif ConfigParameters.Model == 'Mann'     % baustelle
%         Xvec                            = np.array(ConfigParameters.Xvec).reshape(length(ConfigParameters.Xvec),1) 
%         Nx                              = ConfigParameters.Nx 
%         Ny                              = ConfigParameters.Ny 
%         Nz                              = ConfigParameters.Nz 
%         X1                              = np.concatenate((Xvec,0*Xvec),axis=1)
%         X2                              = np.concatenate((Xvec,0*Xvec),axis=1)
%         rx                              = cdist(X1, X2)    
%         nfft                            = Nx;
%         Seeds                           = ConfigParameters.Seeds 
%         u                               = TurbData3D.u                      
%         w                               = TurbData3D.w
%         kappa_x                         = ConfigParameters.kappa_x
%         
%         
%         # specify the variable
%         TurbData4D                      = {}
%         TurbData4D.u                 = np.zeros((length(Seeds),Nx,Ny,Nz))  #  4d turb        
%         TurbData4D.v                 = TurbData3D.v
%         TurbData4D.w                 = np.zeros((length(Seeds),Nx,Ny,Nz))  #  4d turb
%         
%         #  Calculate fourier coeffieients 
%         FCu                             = np.zeros((length(Seeds),Nx,Ny*Nz),dtype=np.complex_)  # two sided Fourier coefficient u                    
%         FCw                             = np.zeros((length(Seeds),Nx,Ny*Nz),dtype=np.complex_)  # two sided Fourier coefficient w
%        
%         Hu_yz                           = np.zeros((length(Seeds),int(Nx/2)),dtype=np.complex_)      # single sided FC
%         Hw_yz                           = np.zeros((length(Seeds),int(Nx/2)),dtype=np.complex_)      # single sided FC
%         
%         H_u_new                         = np.zeros((length(Seeds),int(Nx/2)),dtype=np.complex_)      # single sided FC unfrozen
%         H_w_new                         = np.zeros((length(Seeds),int(Nx/2)),dtype=np.complex_)      # single sided FC unfrozen
%         
%         u_unfro                         = np.zeros((length(Seeds),Nx,Ny*Nz))  # temporarily store the unfrozen u
%         w_unfro                         = np.zeros((length(Seeds),Nx,Ny*Nz))  # temporarily store the unfrozen w
%         
%         for i =1: lengthgth(Seeds)
%             FCu[i]                      = np.fft.fft(u[i], axis=0).reshape(Nx,Ny*Nz, order="F")
%             FCw[i]                      = np.fft.fft(w[i], axis=0).reshape(Nx,Ny*Nz, order="F")
%             
%             disp('Turbulengthce unfreezing started...')
%             
%             for i_yz = 1: Ny*Nz      % loop over points inside yz plane
%                 
%                 for i_x in range(length(Seeds)):  # loop over differnt yz planes
%                     Hu_yz[i_x,:]              = FCu[i_x,1:int(Nx/2)+1,i_yz]
%                     Hw_yz[i_x,:]              = FCw[i_x,1:int(Nx/2)+1,i_yz]
%                 end
%                 
%                 for i_f =1:nfft/2  % loop over each frequency
%                     gamma_u_x           = np.exp(-kappa_x[i_f]*rx) ;       % Coherence matrix X plane;
%                     Gcohx               = np.linalg.cholesky(gamma_u_x) ;  % cholesky decomposition of X  coherence
%                     H_u_new[:,i_f]      = Gcohx.dot(Hu_yz[:,i_f]);
%                     H_w_new[:,i_f]      = Gcohx.dot(Hw_yz[:,i_f]);
%                     u_unfro[:,:,i_yz]   = np.real(ifftr(H_u_new))
%                     w_unfro[:,:,i_yz]   = np.real(ifftr(H_w_new))
%                     
%                 end
%             end
%         end
%         % the TurbData is stored by the dimention Nlongi*3(uvw) *Nx*Ny*Nz  
%         TurbData4D.u         = u_unfro.reshape(length(ConfigParameters.Xvec),Nx,Ny,Nz) ;
%         TurbData4D.w         = w_unfro.reshape(length(ConfigParameters.Xvec),Nx,Ny,Nz) ;
%         print('4D turbulengthce simulation finished!')
%         ErrorSat     = 0 ;
%         ErrorMessage = 'No error detected!';
        
    
        else
        ErrorSat = 1 ;
        ErrorMessage = 'Turbulence model undefined!';
        error(ErrorMessage)      
        end
end
    


 
        

