% if Kaimal model: read in 3D turbulence simulated at different y-z planes from Turbsim and convert to m/s
% if Mann model: 3D turbulence simulated at different y-z planes (already written in m/s)
% 
% Usage: ReadInTurb(ConfigParameters,SimulationNames3D)
% 
% 
% Input: Configuration parameters, generated by TurbConfig.m and ExecuteSim.m
% 
% 
% 
% Output: [TurbData3D,ConfigParameters, ErrorSat, ErrorMessage]
%         ConfigParameters: a struct contains all configuration parameters
%         ErrorSat: 1 for error detected, 0 for no error
%         ErrorMessage: the error message, written as string
%         TurbData3D: independent 3D turbulence data at differnt y-z planes
% 
% 
% Modified:
% 
% 
% ToDo: 
% 
% Created: Feng Guo 19-Nov 2020 Flensburg University of Applied Sciences


function   [TurbData3D,ConfigParameters, ErrorSat, ErrorMessage] = ReadInTurb(ConfigParameters,SimulationNames3D) 
 

    
    % Model Specific lines used for Turbsim
    if ConfigParameters.Model == 'Kaimal'      
       Seeds                           = ConfigParameters.Seeds;
       Nx                              = ConfigParameters.Nx ;
       Ny                              = ConfigParameters.Ny ;
       Nz                              = ConfigParameters.Nz ;
       TurbData3D.u                    = zeros(length(Seeds),Nx,Ny,Nz)  ;   % Nlongi, Nx,Ny,Nz
       TurbData3D.v                    = zeros(length(Seeds),Nx,Ny,Nz)  ;
       TurbData3D.w                    = zeros(length(Seeds),Nx,Ny,Nz)  ;
       saveDir                         = ConfigParameters.saveDir;

       
    % Model Specific lines used for Mann turbulence generator
    elseif ConfigParameters.Model == 'Mann'  %baustelle
         
%          Seeds                           = ConfigParameters.Seeds;
%          Nx                              = ConfigParameters.Nx ;
%          Ny                              = ConfigParameters.Ny ;
%          Nz                              = ConfigParameters.Nz ;
%          TurbData3D                      = {};
%          TurbData3D.u                    = np.zeros((len(Seeds),Nx,Ny,Nz));  
%          TurbData3D.v                    = np.zeros((len(Seeds),Nx,Ny,Nz)); 
%          TurbData3D.w                    = np.zeros((len(Seeds),Nx,Ny,Nz));  
%          saveDir                         = ConfigParameters.saveDir;
    else
      ErrorSat     = 1 ;
      ErrorMessage = 'Turbulence model undefined!';
      error(ErrorMessage)
    end
         
         
         % loop over to read turbulence results
         for i = 1:length(Seeds)
                                                          
             % u v w binary file name           
             wndName   = [saveDir SimulationNames3D{i} '.wnd'];
             [velocity, ~, ~, ~, ~, ~, ~, ~, ~, ~, ~,Scale,Offset] = readBLgrid(wndName);
             TurbData3D.u(i,:,:,:)           = squeeze(velocity(:,1,:,:));   % Nlongi, Nx,Ny,Nz
             TurbData3D.v(i,:,:,:)           = squeeze(velocity(:,2,:,:));   % Nlongi, Nx,Ny,Nz
             TurbData3D.w(i,:,:,:)           = squeeze(velocity(:,3,:,:));   % Nlongi, Nx,Ny,Nz
            
             % read u v w binary and adjust the storage dimention
             if unique(std(TurbData3D.u,0,2))==1
                ErrorSat         = 1 ;
                ErrorMessage     = 'The standard deviation should not be scaled, check turbsim input file to unflag this option!';
                error(ErrorMessage)
             end
             
             if i ==1   % set the offset and Scale factor based on the first yz plane
                ConfigParameters.Scale            = Scale;
                ConfigParameters.Offset           = Offset;
             end

         end
         

       
         ErrorSat     = 0 ;
         ErrorMessage = 'No error detected!' ;
end

        
 